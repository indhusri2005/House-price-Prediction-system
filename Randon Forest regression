from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
import numpy as np

# Assuming train_x and train_y are your features and target variables for training the model

# Model 1: Random Forest Regressor
model1 = RandomForestRegressor(n_estimators=100, random_state=42)
model1.fit(train_x, train_y)

# Predictions for Model 1
predict_y_model1 = model1.predict(train_x)

# Evaluation Metrics for Random Forest Regressor
print("Evaluation Metrics for Model 1 (Random Forest Regressor):\n")

# R squared error
score_model1_1 = metrics.r2_score(train_y, predict_y_model1)
print(f"R squared error: {score_model1_1}")

# Mean Absolute Error
score_model1_2 = metrics.mean_absolute_error(train_y, predict_y_model1)
print(f"Mean Absolute Error (MAE): {score_model1_2}")

# Mean Squared Error (MSE)
mse_model1 = metrics.mean_squared_error(train_y, predict_y_model1)
print(f"Mean Squared Error (MSE): {mse_model1}")

# Root Mean Squared Error (RMSE)
rmse_model1 = np.sqrt(mse_model1)
print(f"Root Mean Squared Error (RMSE): {rmse_model1}")

# Mean Absolute Percentage Error (MAPE)
mape_model1 = metrics.mean_absolute_percentage_error(train_y, predict_y_model1)
print(f"Mean Absolute Percentage Error (MAPE): {mape_model1}")

# Explained Variance Score (EVS)
evs_model1 = metrics.explained_variance_score(train_y, predict_y_model1)
print(f"Explained Variance Score (EVS): {evs_model1}")
